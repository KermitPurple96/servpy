#!/usr/bin/env python3
 
"""Simple HTTP Server With Upload.

This module builds on http.server by implementing the standard GET
and HEAD requests in a fairly straightforward manner.

see: https://gist.github.com/UniIsland/3346170
"""
 
 
__version__ = "0.1"
__all__ = ["SimpleHTTPRequestHandler"]
__author__ = "bones7456"
__home_page__ = "https://gist.github.com/UniIsland/3346170"
 
import os, sys
import os.path, time
import posixpath
import http.server
import socketserver
import urllib.request, urllib.parse, urllib.error
import html
import shutil
import mimetypes
import re
import argparse
import base64
import json
import signal
from io import BytesIO
import netifaces as ni

# CTRL + C
def def_handler(sig, frame):
    print("\n\n[!] Saliendo...\n")
    httpd.server_close()
    sys.exit(1)

# Ctrl+C
signal.signal(signal.SIGINT, def_handler)

def fbytes(B):
   'Return the given bytes as a human friendly KB, MB, GB, or TB string'
   B = float(B)
   KB = float(1024)
   MB = float(KB ** 2) # 1,048,576
   GB = float(KB ** 3) # 1,073,741,824
   TB = float(KB ** 4) # 1,099,511,627,776

   if B < KB:
      return '{0} {1}'.format(B,'Bytes' if 0 == B > 1 else 'Byte')
   elif KB <= B < MB:
      return '{0:.2f} KB'.format(B/KB)
   elif MB <= B < GB:
      return '{0:.2f} MB'.format(B/MB)
   elif GB <= B < TB:
      return '{0:.2f} GB'.format(B/GB)
   elif TB <= B:
      return '{0:.2f} TB'.format(B/TB)

class SimpleHTTPRequestHandler(http.server.BaseHTTPRequestHandler):
 
 
    server_version = "SimpleHTTPWithUpload/" + __version__
    directory_path = "."  # Especifica el directorio desde donde se listarán los archivos

        # Contenido inicial de los clipboards
    clipboard_contents = ["", "", ""]

    def do_GET(self):
        """Serve a GET request."""
        if self.path == '/':
            self.handle_root()
        elif self.path == '/about':
            self.handle_about()
        elif self.path == '/files':
            self.list_files()
        elif self.path.startswith('/files/'):
            filename = self.path[len('/files/'):]  # Extrae el nombre del archivo de la ruta
            self.view_file(filename)
        elif self.path == '/clipboards':
            self.get_clipboards()
        elif self.path == '/ips':  # Manejar la solicitud para obtener IPs
            self.get_ips()
        elif self.path == '/downloads':  # Listar archivos para descargar
            self.list_downloads()
        elif self.path.startswith('/download/'):  # Manejar la descarga de archivos
            filename = self.path[len('/download/'):]  # Extrae el nombre del archivo de la ruta
            self.download_file(filename)

        else:
            self.send_error(404, "File not found")



    def handle_root(self):
        """Handle requests to the root route."""
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<html><body><h1>Welcome to the Root Page!</h1><a href='/about'>About</a></body></html>")


    def handle_about(self):
        """Handle requests to the /about route and serve index.html."""
        try:
            # Lee el contenido de index.html
            with open("index.html", "r", encoding="utf-8") as file:
                content = file.read()

            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(content.encode("utf-8"))
        except FileNotFoundError:
            self.send_response(404)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"<html><body><h1>404 Not Found</h1></body></html>")

    def list_files(self):
        """List files in the current directory."""
        try:
            files = os.listdir(self.directory_path)
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps(files).encode("utf-8"))
        except Exception as e:
            self.send_response(500)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": str(e)}).encode("utf-8"))

    def view_file(self, filename):
        """View the content of a specific file."""
        try:
            with open(os.path.join(self.directory_path, filename), 'r', encoding='utf-8') as file:
                content = file.read()
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"content": content}).encode("utf-8"))
        except FileNotFoundError:
            self.send_response(404)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "File not found"}).encode("utf-8"))
        except Exception as e:
            self.send_response(500)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": str(e)}).encode("utf-8"))



    def download_file(self, filename):
        """Descargar el archivo especificado."""
        try:
            file_path = os.path.join(self.directory_path, filename)
            if os.path.isfile(file_path):
                self.send_response(200)
                self.send_header("Content-Disposition", f"attachment; filename={filename}")
                self.send_header("Content-type", "application/octet-stream")
                self.end_headers()
                with open(file_path, 'rb') as f:
                    self.wfile.write(f.read())
            else:
                self.send_error(404, "File not found")
        except Exception as e:
            self.send_error(500, f"Error downloading file: {str(e)}")


    def get_clipboards(self):
        """Get the content of the clipboards."""
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(self.clipboard_contents).encode("utf-8"))


    def update_clipboard(self, index, content):
        """Update the contents of a clipboard."""
        self.clipboard_contents[int(index)] = content
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps({"message": "Clipboard updated successfully"}).encode("utf-8"))

    def do_PUT(self):
        """Serve a PUT request for updating clipboards."""
        if self.path.startswith('/clipboards/'):
            index = self.path[len('/clipboards/'):]  # Extrae el índice del clipboard
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data)

            self.update_clipboard(index, data.get('content', ''))
        else:
            self.send_error(404, "File not found")



    def get_ips(self):
        """Obtener las direcciones IP de las interfaces de red."""
        ips = []
        for interface in ni.interfaces():
            addresses = ni.ifaddresses(interface)
            if ni.AF_INET in addresses:
                for link in addresses[ni.AF_INET]:
                    ips.append(link['addr'])
        
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(ips).encode("utf-8"))




    def do_POST(self):
        """Serve a POST request."""
        r, info = self.deal_post_data()
        print((r, info, "by: ", self.client_address))
        f = BytesIO()
        f.write(b'<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">')
        f.write(b"<html>\n<title>Upload Result Page</title>\n")
        f.write(b'<style type="text/css">\n')
        f.write(b'* {font-family: Helvetica; font-size: 16px; }\n')
        f.write(b'a { text-decoration: none; }\n')
        f.write(b'</style>\n')
        f.write(b"<body>\n<h2>Upload Result Page</h2>\n")
        f.write(b"<hr>\n")
        if r:
            f.write(b"<strong>Success!</strong>")
        else:
            f.write(b"<strong>Failed!</strong>")
        f.write(info.encode())
        f.write(("<br><br><a href=\"%s\">" % self.headers.get('referer', '/')).encode())
        f.write(b"<button>Back</button></a>\n")
        f.write(b"<hr><small>Powered By: bones7456<br>Check new version ")
        f.write(b"<a href=\"https://gist.github.com/UniIsland/3346170\" target=\"_blank\">")
        f.write(b"here</a>.</small></body>\n</html>\n")
        length = f.tell()
        f.seek(0)
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.send_header("Content-Length", str(length))
        self.end_headers()
        self.copyfile(f, self.wfile)
        f.close()

    def deal_post_data(self):
        uploaded_files = []
        content_type = self.headers.get('content-type', '')

        if "multipart/form-data" in content_type and "boundary=" in content_type:
            # Para solicitudes curl con multipart/form-data
            boundary = content_type.split("boundary=")[1].encode()
            remainbytes = int(self.headers['content-length'])
            line = self.rfile.readline()
            remainbytes -= len(line)

            if boundary not in line:
                return False, "Content does not begin with boundary"

            while remainbytes > 0:
                line = self.rfile.readline()
                remainbytes -= len(line)
                fn = re.findall(r'Content-Disposition.*name="file"; filename="(.*)"', line.decode())
                if not fn:
                    return False, "Cannot find file name in Content-Disposition"

                path = self.translate_path(self.path)
                fn = os.path.join(path, fn[0])
                line = self.rfile.readline()
                remainbytes -= len(line)
                line = self.rfile.readline()
                remainbytes -= len(line)

                try:
                    with open(fn, 'wb') as out:
                        preline = self.rfile.readline()
                        remainbytes -= len(preline)
                        
                        while remainbytes > 0:
                            line = self.rfile.readline()
                            remainbytes -= len(line)
                            if boundary in line:
                                preline = preline.rstrip(b'\r\n')
                                out.write(preline)
                                uploaded_files.append(fn)
                                break
                            else:
                                out.write(preline)
                                preline = line
                except IOError:
                    return False, "Cannot create file to write. Check write permissions."

        elif "text/plain" in content_type or content_type == '':
            # Para solicitudes wget con texto sin formato
            fn = "uploaded_file.txt"
            path = self.translate_path(self.path)
            fn = os.path.join(path, fn)
            remainbytes = int(self.headers['content-length'])

            try:
                with open(fn, 'wb') as out:
                    out.write(self.rfile.read(remainbytes))
                    uploaded_files.append(fn)
            except IOError:
                return False, "Cannot create file to write. Check write permissions."

        else:
            return False, "Unsupported Content-Type: Only multipart/form-data and text/plain are allowed."

        return True, "<br>Files uploaded: " + "<br>".join(uploaded_files)





    def send_head(self):

        path = self.translate_path(self.path)
        f = None
        if os.path.isdir(path):
            if not self.path.endswith('/'):
                # redirect browser - doing basically what apache does
                self.send_response(301)
                self.send_header("Location", self.path + "/")
                self.end_headers()
                return None
            for index in "index.html", "index.htm":
                index = os.path.join(path, index)
                if os.path.exists(index):
                    path = index
                    break
            else:
                return self.list_directory(path)
        ctype = self.guess_type(path)
        try:
            # Always read in binary mode. Opening files in text mode may cause
            # newline translations, making the actual size of the content
            # transmitted *less* than the content-length!
            f = open(path, 'rb')
        except IOError:
            self.send_error(404, "File not found")
            return None
        self.send_response(200)
        self.send_header("Content-type", ctype)
        fs = os.fstat(f.fileno())
        self.send_header("Content-Length", str(fs[6]))
        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
        self.end_headers()
        return f
 


    def translate_path(self, path):

        # abandon query parameters
        path = path.split('?',1)[0]
        path = path.split('#',1)[0]
        path = posixpath.normpath(urllib.parse.unquote(path))
        words = path.split('/')
        words = [_f for _f in words if _f]
        path = os.getcwd()
        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        return path
 
    def copyfile(self, source, outputfile):
        shutil.copyfileobj(source, outputfile)
 
    def guess_type(self, path):
 
        base, ext = posixpath.splitext(path)
        if ext in self.extensions_map:
            return self.extensions_map[ext]
        ext = ext.lower()
        if ext in self.extensions_map:
            return self.extensions_map[ext]
        else:
            return self.extensions_map['']
 
    if not mimetypes.inited:
        mimetypes.init() # try to read system mime.types
    extensions_map = mimetypes.types_map.copy()
    extensions_map.update({
        '': 'application/octet-stream', # Default
        '.py': 'text/plain',
        '.c': 'text/plain',
        '.h': 'text/plain',
        })
 
parser = argparse.ArgumentParser()
parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',
                        help='Specify alternate bind address '
                             '[default: all interfaces]')
parser.add_argument('port', action='store',
                        default=8000, type=int,
                        nargs='?',
                        help='Specify alternate port [default: 8000]')
args = parser.parse_args()

PORT = args.port
BIND = args.bind
HOST = BIND

if HOST == '':
	HOST = 'localhost'

Handler = SimpleHTTPRequestHandler

with socketserver.TCPServer((BIND, PORT), Handler) as httpd:
	serve_message = "Serving HTTP on {host} port {port} (http://{host}:{port}/) ..."
	print(serve_message.format(host=HOST, port=PORT))
	httpd.serve_forever()
